---
# file: postgresql.yml
# - hosts: postgres

- hosts: localhost
  tags: ['provision']
  connection: local
  gather_facts: False
  vars:
    region: eu-central-1
  tasks:
    - name: spin postgres master
      ec2:
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        key_name: mgmt-eu
        group_id: ['sg-066df76e','sg-a06d28c8']
        count: 1
        region: "{{ region }}"
        instance_type: m4.2xlarge
        image: ami-39946a56
        wait: yes
        wait_timeout: 500
        instance_tags:
          db: postgres
          Name: PG-Jony
        volumes:
        - device_name: /dev/sdb
          volume_size: 50
          delete_on_termination: true
        - device_name: /dev/sdc
          volume_size: 50
          delete_on_termination: true
        monitoring: no
        vpc_subnet_id: subnet-32d23f48
        assign_public_ip: yes
      register: ec2

    - name: print instance info
      action: debug msg="Instance info  {{ ec2 }}"

    - name: Add new instance to host group
      add_host: name={{ item.private_ip }} groupname=pgml
      with_items: '{{ec2.instances}}'
    - name: Wait for SSH to come up
      wait_for: host={{ item.private_ip }} port=22 delay=30 timeout=700 state=started
      with_items: '{{ec2.instances}}'

- hosts: pgml
  tags: ['master']
  remote_user: centos
  vars_files:
    - group_vars/PG-Master
  environment: "{{pg_env}}"
  roles:
    - { role: common, become: yes, become_user: root}
    - { role: PG, master: yes}
    - { role: ansible-repmgr , become: yes, become_user: root}

- hosts: tag_Role_PG_Barman
  tags: ['barman']
  remote_user: centos
  roles:
    - common
    - { role: ansible-barman , become: yes, become_user: root}

- include: postgresql-backup.yml
  tags: [replica]
